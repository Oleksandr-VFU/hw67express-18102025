// –ú—ñ–¥–ª–≤–∞—Ä –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Å–µ—Å—ñ—é
export const requestLogger = (req, res, next) => {
  const timestamp = new Date().toISOString();
  const method = req.method;
  const url = req.originalUrl || req.url;
  const ip = req.ip || req.connection.remoteAddress || req.socket.remoteAddress || 'unknown';
  const sessionId = req.sessionID ? req.sessionID.slice(0, 8) : 'none';
  const authenticated = req.isAuthenticated ? req.isAuthenticated() : false;
  
  console.log(`[${timestamp}] ${method} ${url} - IP: ${ip} - Session: ${sessionId} - Auth: ${authenticated}`);
  next();
};

// Passport middleware –¥–ª—è –∑–∞—Ö–∏—â–µ–Ω–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é —Å–µ—Å—ñ–π
export const passportAuthMiddleware = (req, res, next) => {
  if (req.isAuthenticated()) {
    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è rolling sessions
    req.session.touch();
    return next();
  }
  
  // –î–ª—è API –∑–∞–ø–∏—Ç—ñ–≤ (JSON)
  const acceptsJson = req.headers.accept && req.headers.accept.includes('application/json');
  if (acceptsJson) {
    return res.status(401).json({ 
      error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' 
    });
  }
  
  // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥—ñ–Ω
  res.redirect('/auth/login');
};

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ admin –ø—Ä–∞–≤
export const requireAdmin = (req, res, next) => {
  if (!req.user || req.user.role !== 'admin') {
    // –î–ª—è API –∑–∞–ø–∏—Ç—ñ–≤ (JSON)
    const acceptsJson = req.headers.accept && req.headers.accept.includes('application/json');
    if (acceptsJson) {
      return res.status(403).json({ 
        error: '–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞' 
      });
    }
    
    // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    return res.status(403).send(`
      <h1>–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</h1>
      <p>–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É.</p>
      <a href="/">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É</a>
    `);
  }
  next();
};

// –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π middleware –¥–ª—è –∑–∞—Ö–∏—â–µ–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É /protected
// –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥ –Ω–∞–¥–∞–Ω–Ω—è–º –¥–æ—Å—Ç—É–ø—É
export const protectedRouteMiddleware = (req, res, next) => {
  // –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  const sessionExists = req.session && req.sessionID;
  const isAuthenticated = req.isAuthenticated();
  const userExists = req.user && req.user.id;
  
  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–æ—Å—Ç—É–ø—É
  console.log(`[PROTECTED ROUTE] Session ID: ${req.sessionID?.slice(0, 8)}... | Authenticated: ${isAuthenticated} | User: ${userExists ? req.user.username : 'none'}`);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Å–µ—Å—ñ—ó
  if (!sessionExists) {
    console.log('[PROTECTED ROUTE] Access denied: No session found');
    return handleUnauthenticated(req, res, '–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Passport
  if (!isAuthenticated) {
    console.log('[PROTECTED ROUTE] Access denied: User not authenticated');
    return handleUnauthenticated(req, res, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–µ—Å—ñ—ó
  if (!userExists) {
    console.log('[PROTECTED ROUTE] Access denied: User data not found in session');
    return handleUnauthenticated(req, res, '–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Å–µ—Å—ñ—ó');
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Ä–º—ñ–Ω—É –¥—ñ—ó —Å–µ—Å—ñ—ó
  if (req.session.cookie && req.session.cookie.expires) {
    const now = new Date();
    const expires = new Date(req.session.cookie.expires);
    if (now > expires) {
      console.log('[PROTECTED ROUTE] Access denied: Session expired');
      return handleUnauthenticated(req, res, '–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è');
    }
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
  req.session.lastAccess = new Date();
  req.session.touch();
  
  console.log(`[PROTECTED ROUTE] Access granted to user: ${req.user.username} (${req.user.role})`);
  next();
};

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
function handleUnauthenticated(req, res, reason) {
  const acceptsJson = req.headers.accept && req.headers.accept.includes('application/json');
  
  if (acceptsJson) {
    // API –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    return res.status(401).json({
      error: '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–æ –∑–∞—Ö–∏—â–µ–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É',
      reason: reason,
      redirectTo: '/auth/login'
    });
  } else {
    // –ë—Ä–∞—É–∑–µ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é
    return res.status(401).send(`
      <!DOCTYPE html>
      <html lang="uk">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</title>
        <link rel="icon" href="/favicon.ico" type="image/x-icon">
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; background: #f8d7da; }
          .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; border: 1px solid #f5c6cb; }
          .error-header { color: #721c24; text-align: center; margin-bottom: 20px; }
          .reason { background: #f8d7da; padding: 15px; border-radius: 5px; color: #721c24; margin: 20px 0; }
          .actions { text-align: center; margin-top: 30px; }
          .btn { display: inline-block; padding: 10px 20px; margin: 0 10px; text-decoration: none; border-radius: 5px; }
          .btn-primary { background: #007bff; color: white; }
          .btn-secondary { background: #6c757d; color: white; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="error-header">
            <h1>üîí –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</h1>
            <p>–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –∑–∞—Ö–∏—â–µ–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É.</p>
          </div>
          <div class="reason">
            <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${reason}
          </div>
          <div class="actions">
            <a href="/auth/login" class="btn btn-primary">–£–≤—ñ–π—Ç–∏ –¥–æ —Å–∏—Å—Ç–µ–º–∏</a>
            <a href="/" class="btn btn-secondary">–ù–∞ –≥–æ–ª–æ–≤–Ω—É</a>
          </div>
        </div>
      </body>
      </html>
    `);
  }
}

// Middleware –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
export const destroySession = (req, res, next) => {
  if (req.session) {
    req.session.destroy((err) => {
      if (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó:', err);
        return next(err);
      }
      res.clearCookie('sessionId'); // –û—á–∏—â—É—î–º–æ cookie —Å–µ—Å—ñ—ó
      next();
    });
  } else {
    next();
  }
};
